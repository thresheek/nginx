name: buildbot

on:
  workflow_dispatch:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  test:
    name: windows-2022, ${{ matrix.toolchain }}, ${{ matrix.env }}
    runs-on: windows-2022
    strategy:
      matrix:
        #toolchain: [ msvc ]
        #env: [ x64, x86 ]
        include:
            toolchain: mingw32
            env: i686
            toolchain: mingw64
            env: x86_64
      fail-fast: false

    steps:
      - name: Check out nginx sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Check out nginx tests
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: nginx/nginx-tests
          path: nginx-tests

      - name: Upgrade perl
        if: 0
        shell: cmd
        run: |
          perl --version
          choco uninstall strawberryperl
          choco install --no-progress strawberryperl
          perl --version

      - name: Install msys2
        if: startsWith( matrix.toolchain, 'mingw')
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.toolchain }}
          install: autoconf automake base-devel git make mingw-w64-${{ matrix.env }}-gcc
          update: true

      - name: Set the defaults and set up environment
        shell: bash
        run: |
            ENV_JSON=$(cat <<EOF
            {
            "NGINX_CONFIGURE_CMD_WIN": "auto/configure \
                      --builddir=objs \
                      --prefix= \
                      --conf-path=conf/nginx.conf \
                      --pid-path=logs/nginx.pid \
                      --http-log-path=logs/access.log \
                      --error-log-path=logs/error.log \
                      --sbin-path=nginx.exe \
                      --http-client-body-temp-path=temp/client_body_temp \
                      --http-proxy-temp-path=temp/proxy_temp \
                      --http-fastcgi-temp-path=temp/fastcgi_temp \
                      --with-cc-opt=-DFD_SETSIZE=1024 \
                      --with-pcre=objs/lib/pcre \
                      --with-zlib=objs/lib/zlib \
                      --with-select_module \
                      --with-http_realip_module \
                      --with-http_addition_module \
                      --with-http_sub_module \
                      --with-http_dav_module \
                      --with-http_stub_status_module \
                      --with-http_flv_module \
                      --with-http_mp4_module \
                      --with-http_gunzip_module \
                      --with-http_gzip_static_module \
                      --with-http_random_index_module \
                      --with-http_secure_link_module \
                      --with-http_ssl_module \
                      --with-mail_ssl_module \
                      --with-http_auth_request_module \
                      --with-http_v2_module \
                      --with-http_slice_module \
                      --with-stream_ssl_module \
                      --with-stream_ssl_preread_module \
                      --with-stream_realip_module \
                      --with-openssl=objs/lib/openssl",
            "NGINX_CONFIGURE_CC_MSVC": "--with-cc=cl",
            "NGINX_CONFIGURE_CC_MINGW": "--with-cc=/${{ matrix.toolchain }}/bin/${{ matrix.env }}-w64-mingw32-gcc.exe",
            "NGINX_CONFIGURE_ADD_STATIC": "--with-stream --with-mail",
            "NGINX_CONFIGURE_ADD_DYNAMIC": "--with-stream=dynamic --with-mail=dynamic",
            "NGINX_CONFIGURE_OPENSSL_OPT": "no-asm no-tests -D_WIN32_WINNT=0x0603"
            }
            EOF
            )

            NGINX_CONFIGURE_CMD_WIN=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CMD_WIN')
            NGINX_CONFIGURE_CC_MSVC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MSVC')
            NGINX_CONFIGURE_CC_MINGW=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MINGW')
            NGINX_CONFIGURE_ADD_STATIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_STATIC')
            NGINX_CONFIGURE_ADD_DYNAMIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_DYNAMIC')
            NGINX_CONFIGURE_OPENSSL_OPT=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_OPENSSL_OPT')

            echo NGINX_CONFIGURE_CMD_WIN="$NGINX_CONFIGURE_CMD_WIN" >> $GITHUB_ENV
            echo NGINX_CONFIGURE_CC_MSVC="$NGINX_CONFIGURE_CC_MSVC" >> $GITHUB_ENV
            echo NGINX_CONFIGURE_CC_MINGW="$NGINX_CONFIGURE_CC_MINGW" >> $GITHUB_ENV
            echo NGINX_CONFIGURE_ADD_STATIC="$NGINX_CONFIGURE_ADD_STATIC" >> $GITHUB_ENV
            echo NGINX_CONFIGURE_ADD_DYNAMIC="$NGINX_CONFIGURE_ADD_DYNAMIC" >> $GITHUB_ENV
            echo NGINX_CONFIGURE_OPENSSL_OPT="$NGINX_CONFIGURE_OPENSSL_OPT" >> $GITHUB_ENV

            echo "VCVARSALL=$(vswhere -products \* -latest -property installationPath)\\VC\\Auxiliary\\Build\\vcvarsall.bat" >> $GITHUB_ENV
            echo "VCARCH=${{ matrix.env }}" >> $GITHUB_ENV
            echo "CL=/MP" >> $GITHUB_ENV

      - name: Download and unpack dependencies
        shell: bash
        run: |
          mkdir t
          mkdir objs
          mkdir objs\\lib
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.39/pcre2-10.39.tar.gz
          tar -C objs/lib --transform 's/pcre2-10.39/pcre/' -xzf ./pcre2-10.39.tar.gz
          echo '#include <stdint.h>' > objs\lib\pcre\src\inttypes.h
          curl -sLO https://zlib.net/fossils/zlib-1.3.1.tar.gz
          tar -C objs/lib --transform 's/zlib-1.3.1/zlib/' -xzf ./zlib-1.3.1.tar.gz
          curl -sLO https://github.com/openssl/openssl/releases/download/openssl-3.0.13/openssl-3.0.13.tar.gz
          tar -C objs/lib --transform 's/openssl-3.0.13/openssl/' -xzf ./openssl-3.0.13.tar.gz
          cp -R objs objs.deps

      - name: Configure and build
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          @echo on
          call "%VCVARSALL%" %VCARCH%
          bash ^
            %NGINX_CONFIGURE_CMD_WIN% ^
            %NGINX_CONFIGURE_CC_MSVC% ^
            %NGINX_CONFIGURE_ADD_STATIC% ^
            --with-openssl-opt="%NGINX_CONFIGURE_OPENSSL_OPT%"
          nmake -f objs/Makefile

      - name: Configure and build
        if: startsWith( matrix.toolchain, 'mingw00')
        shell: msys2 {0}
        run: |
          $NGINX_CONFIGURE_CMD_WIN \
          $NGINX_CONFIGURE_CC_MINGW \
          $NGINX_CONFIGURE_ADD_STATIC \
          --with-openssl-opt="$NGINX_CONFIGURE_OPENSSL_OPT"
          make -j4

      - name: Run tests
        if: 0
        shell: cmd
        run: |
          cd nginx-tests
          prove -v ../t .
        env:
          TEST_NGINX_BINARY: "${{ github.workspace }}\\objs\\nginx.exe"
          PERL5LIB: "${{ github.workspace }}\\nginx-tests\\lib"
          TEMP: "C:\\TEMP"

      - name: Cleanup
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          call "%VCVARSALL%" %VCARCH%
          nmake clean

      - name: Cleanup
        if: startsWith( matrix.toolchain, 'mingw00')
        shell: msys2 {0}
        run: |
          make clean

      - name: Restore dependencies
        run: |
          cp -R objs.deps objs

      - name: Configure and build with debug
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          @echo on
          call "%VCVARSALL%" %VCARCH%
          bash ^
            %NGINX_CONFIGURE_CMD_WIN% ^
            %NGINX_CONFIGURE_CC_MSVC% ^
            %NGINX_CONFIGURE_ADD_STATIC% ^
            --with-openssl-opt="%NGINX_CONFIGURE_OPENSSL_OPT%" ^
            --with-debug
          nmake -f objs/Makefile

      - name: Configure and build with debug
        if: startsWith( matrix.toolchain, 'mingw00')
        shell: msys2 {0}
        run: |
          $NGINX_CONFIGURE_CMD_WIN \
          $NGINX_CONFIGURE_CC_MINGW \
          $NGINX_CONFIGURE_ADD_STATIC \
          --with-openssl-opt="$NGINX_CONFIGURE_OPENSSL_OPT" \
          --with-debug
          make -j4

      - name: Run tests with debug
        if: 0
        shell: cmd
        run: |
          cd nginx-tests
          prove -v ../t .
        env:
          TEST_NGINX_BINARY: "${{ github.workspace }}\\objs\\nginx.exe"
          PERL5LIB: "${{ github.workspace }}\\nginx-tests\\lib"
          TEMP: "C:\\TEMP"

      - name: Cleanup
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          call "%VCVARSALL%" %VCARCH%
          nmake clean

      - name: Cleanup
        if: startsWith( matrix.toolchain, 'mingw00')
        shell: msys2 {0}
        run: |
          make clean

      - name: Restore dependencies
        if: startsWith( matrix.toolchain, 'mingw00')
        run: |
          cp -R objs.deps objs

      - name: Configure and build dynamic with debug
        if: startsWith( matrix.toolchain, 'mingw')
        shell: msys2 {0}
        run: |
          $NGINX_CONFIGURE_CMD_WIN \
          $NGINX_CONFIGURE_CC_MINGW \
          $NGINX_CONFIGURE_ADD_DYNAMIC \
          --with-openssl-opt="$NGINX_CONFIGURE_OPENSSL_OPT" \
          --with-debug
          make
          ls objs/

      - name: Run tests dynamic debug
        if: startsWith( matrix.toolchain, 'mingw')
        shell: cmd
        run: |
          call "%VCVARSALL%" %VCARCH%
          ls objs
          ls D:/a/nginx/nginx/objs/ngx_mail_module.so
          dumpbin /headers objs/nginx
          dumpbin /headers objs/ngx_mail_module.so
          cd nginx-tests
          prove -v ../t .
        env:
          TEST_NGINX_BINARY: "${{ github.workspace }}\\objs\\nginx.exe"
          PERL5LIB: "${{ github.workspace }}\\nginx-tests\\lib"
          TEMP: "C:\\TEMP"
